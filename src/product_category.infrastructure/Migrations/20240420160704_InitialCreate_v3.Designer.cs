// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using product_category.infrastructure.Data.EFCore;

#nullable disable

namespace product_category.infrastructure.Migrations
{
    [DbContext(typeof(EFCoreDbContext))]
    [Migration("20240420160704_InitialCreate_v3")]
    partial class InitialCreate_v3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("product_category.core.Domain.EFCore.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentId");

                    b.Property<Guid>("tenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.CategoryAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("categoryId");

                    b.Property<bool?>("Grouped")
                        .HasColumnType("boolean")
                        .HasColumnName("grouped");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Varianter")
                        .HasColumnType("boolean")
                        .HasColumnName("varianter");

                    b.Property<Guid>("tenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("category-attributes", (string)null);
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.CategoryAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryAttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("categoryAttributeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("tenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryAttributeId");

                    b.ToTable("category-attribute-values", (string)null);
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.Category", b =>
                {
                    b.HasOne("product_category.core.Domain.EFCore.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.CategoryAttribute", b =>
                {
                    b.HasOne("product_category.core.Domain.EFCore.Category", null)
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.CategoryAttributeValue", b =>
                {
                    b.HasOne("product_category.core.Domain.EFCore.CategoryAttribute", null)
                        .WithMany("CategoryAttributeValues")
                        .HasForeignKey("CategoryAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.Category", b =>
                {
                    b.Navigation("CategoryAttributes");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("product_category.core.Domain.EFCore.CategoryAttribute", b =>
                {
                    b.Navigation("CategoryAttributeValues");
                });
#pragma warning restore 612, 618
        }
    }
}
